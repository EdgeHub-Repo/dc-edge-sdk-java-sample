/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dc.edge.sdk.sample.java.app;

import java.util.ArrayList;

import EdgeSync360.EdgeHub.Java.SDK.EdgeAgent;
import EdgeSync360.EdgeHub.Java.SDK.common.Const;
import EdgeSync360.EdgeHub.Java.SDK.common.Const.EdgeType;
import EdgeSync360.EdgeHub.Java.SDK.common.EdgeAgentListener;
import EdgeSync360.EdgeHub.Java.SDK.common.Enum.ConnectType;
import EdgeSync360.EdgeHub.Java.SDK.common.Enum.Protocol;
import EdgeSync360.EdgeHub.Java.SDK.model.edge.ConfigAck;
import EdgeSync360.EdgeHub.Java.SDK.model.edge.DCCSOptions;
import EdgeSync360.EdgeHub.Java.SDK.model.edge.EdgeAgentOptions;
import EdgeSync360.EdgeHub.Java.SDK.model.edge.EdgeConfig;
import EdgeSync360.EdgeHub.Java.SDK.model.edge.MQTTOptions;
import EdgeSync360.EdgeHub.Java.SDK.model.edge.TimeSyncCommand;
import EdgeSync360.EdgeHub.Java.SDK.model.edge.WriteValueCommand;
import EdgeSync360.EdgeHub.Java.SDK.model.event.DisconnectedEventArgs;
import EdgeSync360.EdgeHub.Java.SDK.model.event.EdgeAgentConnectedEventArgs;
import EdgeSync360.EdgeHub.Java.SDK.model.event.MessageReceivedEventArgs;

public class Main {

    public static void main(String[] args) {

        EdgeAgentOptions options = new EdgeAgentOptions();
        // Connection type (DCCS, MQTT). The default is DCCS.
        options.ConnectType = ConnectType.DCCS;
        // If ConnectType is DCCS, the following options must be entered:
        options.DCCS = new DCCSOptions("YOUR_CREDENTIAL_KEY",
                "YOUR_API_URL");

        // If ConnectType is MQTT, the following options must be entered:
        options.MQTT = new MQTTOptions("127.0.0.1", 1883, "admin", "pwd", Protocol.TCP);
        options.UseSecure = false;
        options.AutoReconnect = true;
        options.NodeId = "YOUR_NODE_ID"; // Get from portal
        options.Type = EdgeType.Gateway; // / Configure the edge type as Gateway or Device. The default is Gateway.
        options.DeviceId = "SmartDevice1"; // If the type is Device, the DeviceId must be entered.
        options.Heartbeat = 60000; // The default is 60 seconds.
        options.DataRecover = true; // Configure whether to recover data when disconnected.

        EdgeAgentListener agentListener = new EdgeAgentListener() {
            @Override
            public void Connected(EdgeAgent agent, EdgeAgentConnectedEventArgs args) {
                System.out.println("Connected");
                // After the connection is established, upload the configuration.
                // You can choose to upload either block-specific configuration or a common
                // configuration.
                // Upload common configuration by calling doUploadCfg(agent).
                doUploadBlockCfg(agent);
                EdgeHelpers edgeHelpers = new EdgeHelpers(agent);
                // To enable block-specific data uploading, configure block names and set
                // isBlockData to true.
                // Here, we configure two block names: "Pump01" and "Pump02".
                // Setting isBlockData to true indicates that block data should be uploaded.
                edgeHelpers.blockNames = new String[] { "Pump01", "Pump02" };
                edgeHelpers.isBlockData = true;
                // Configure the data sending loop interval (in milliseconds).
                // The default interval is 1000 milliseconds (1 second).
                edgeHelpers.sendLoopInterval = 10000;
                doSendDataLoop(edgeHelpers);
            }

            @Override
            public void Disconnected(EdgeAgent agent, DisconnectedEventArgs args) {
                System.out.println("Disconnected");
            }

            @Override
            public void MessageReceived(EdgeAgent agent, MessageReceivedEventArgs e) {
                System.out.println("MessageReceived");
                switch (e.Type) {
                    case Const.MessageType.WriteValue:
                        WriteValueCommand wvcMsg = (WriteValueCommand) e.Message;
                        for (WriteValueCommand.Device device : wvcMsg.DeviceList) {
                            System.out.println("DeviceID:" + device.Id);
                            for (WriteValueCommand.Tag tag : device.TagList) {
                                System.out.printf("TagName: %s, Value: %s\n", tag.Name, tag.Value.toString());
                            }
                        }
                        break;
                    case Const.MessageType.TimeSync:
                        TimeSyncCommand tscMsg = (TimeSyncCommand) e.Message;
                        System.out.println("UTC Time:" + tscMsg.UTCTime.toString());
                        break;
                    case Const.MessageType.ConfigAck:
                        ConfigAck cfgAckMsg = (ConfigAck) e.Message;
                        String result = cfgAckMsg.Result.toString();
                        System.out.println("ConfigAck Result: " + result);
                        break;
                }
            }
        };

        final EdgeAgent edgeAgent = new EdgeAgent(options, agentListener);

        edgeAgent.Connect();
    }

    static void doUploadBlockCfg(EdgeAgent agent) {
        try {
            EdgeConfig config = new EdgeConfig();
            int deviceCount = 1;
            int ATagCount = 5;
            int DTagCount = 5;
            int TTagCount = 5;

            config.Node = new EdgeConfig.NodeConfig();

            config.Node.DeviceList = new ArrayList<>();

            for (int i = 1; i <= deviceCount; i++) {
                EdgeConfig.DeviceConfig device = new EdgeConfig.DeviceConfig();
                {
                    device.Id = "Device" + i;
                    device.Name = "Device" + i;
                    device.Type = "Smart Device";
                    device.Description = "Device " + i;
                }

                EdgeConfig.BlockConfig blockConfig = new EdgeConfig.BlockConfig();
                blockConfig.BlockType = "Pump";
                blockConfig.AnalogTagList = new ArrayList<>();
                blockConfig.DiscreteTagList = new ArrayList<>();
                blockConfig.TextTagList = new ArrayList<>();

                for (int j = 1; j <= ATagCount; j++) {
                    EdgeConfig.AnalogTagConfig analogTag = new EdgeConfig.AnalogTagConfig();
                    {
                        analogTag.Name = "ATag" + j;
                        analogTag.Description = "ATag " + j;
                        analogTag.ReadOnly = false;
                        analogTag.ArraySize = 0;
                        analogTag.SpanHigh = 1000.0;
                        analogTag.SpanLow = 0.0;
                        analogTag.EngineerUnit = "";
                        analogTag.IntegerDisplayFormat = 4;
                        analogTag.FractionDisplayFormat = 2;

                    }
                    blockConfig.AnalogTagList.add(analogTag);
                }

                for (int j = 1; j <= DTagCount; j++) {
                    EdgeConfig.DiscreteTagConfig discreteTag = new EdgeConfig.DiscreteTagConfig();
                    {
                        discreteTag.Name = "DTag" + j;
                        discreteTag.Description = "DTag " + j;
                        discreteTag.ReadOnly = false;
                        discreteTag.ArraySize = 0;
                        discreteTag.State0 = "0";
                        discreteTag.State1 = "1";
                        discreteTag.State2 = "";
                        discreteTag.State3 = "";
                        discreteTag.State4 = "";
                        discreteTag.State5 = "";
                        discreteTag.State6 = "";
                        discreteTag.State7 = "";

                    }
                    blockConfig.DiscreteTagList.add(discreteTag);

                }

                for (int j = 1; j <= TTagCount; j++) {
                    EdgeConfig.TextTagConfig textTag = new EdgeConfig.TextTagConfig();
                    {
                        textTag.Name = "TTag" + j;
                        textTag.Description = "TTag " + j;
                        textTag.ReadOnly = false;
                        textTag.ArraySize = 0;
                    }
                    blockConfig.TextTagList.add(textTag);
                }
                device.AddBlock("Pump01", blockConfig);
                device.AddBlock("Pump02", blockConfig);
                config.Node.DeviceList.add(device);
            }

            agent.UploadConfig(Const.ActionType.Delsert, config);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static void doUploadCfg(EdgeAgent agent) {
        try {
            EdgeConfig config = new EdgeConfig();
            int deviceCount = 1;
            int ATagCount = 5;
            int DTagCount = 5;
            int TTagCount = 5;

            config.Node = new EdgeConfig.NodeConfig();

            config.Node.DeviceList = new ArrayList<>();

            for (int i = 1; i <= deviceCount; i++) {
                EdgeConfig.DeviceConfig device = new EdgeConfig.DeviceConfig();
                {
                    device.Id = "Device" + i;
                    device.Name = "Device" + i;
                    device.Type = "Smart Device";
                    device.Description = "Device " + i;
                }

                device.AnalogTagList = new ArrayList<>();
                device.DiscreteTagList = new ArrayList<>();
                device.TextTagList = new ArrayList<>();

                for (int j = 1; j <= ATagCount; j++) {
                    EdgeConfig.AnalogTagConfig analogTag = new EdgeConfig.AnalogTagConfig();
                    {
                        analogTag.Name = "ATag" + j;
                        analogTag.Description = "ATag " + j;
                        analogTag.ReadOnly = false;
                        analogTag.ArraySize = 0;
                        analogTag.SpanHigh = 1000.0;
                        analogTag.SpanLow = 0.0;
                        analogTag.EngineerUnit = "";
                        analogTag.IntegerDisplayFormat = 4;
                        analogTag.FractionDisplayFormat = 2;

                    }
                    device.AnalogTagList.add(analogTag);
                }

                for (int j = 1; j <= DTagCount; j++) {
                    EdgeConfig.DiscreteTagConfig discreteTag = new EdgeConfig.DiscreteTagConfig();
                    {
                        discreteTag.Name = "DTag" + j;
                        discreteTag.Description = "DTag " + j;
                        discreteTag.ReadOnly = false;
                        discreteTag.ArraySize = 0;
                        discreteTag.State0 = "0";
                        discreteTag.State1 = "1";
                        discreteTag.State2 = "";
                        discreteTag.State3 = "";
                        discreteTag.State4 = "";
                        discreteTag.State5 = "";
                        discreteTag.State6 = "";
                        discreteTag.State7 = "";

                    }
                    device.DiscreteTagList.add(discreteTag);

                }

                for (int j = 1; j <= TTagCount; j++) {
                    EdgeConfig.TextTagConfig textTag = new EdgeConfig.TextTagConfig();
                    {
                        textTag.Name = "TTag" + j;
                        textTag.Description = "TTag " + j;
                        textTag.ReadOnly = false;
                        textTag.ArraySize = 0;
                    }
                    device.TextTagList.add(textTag);
                }

                config.Node.DeviceList.add(device);
            }

            agent.UploadConfig(Const.ActionType.Delsert, config);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static void doSendDataLoop(EdgeHelpers edgeHelpers) {
        try {
            edgeHelpers.dataLoopTimer.schedule(edgeHelpers.dataLoopTask, 0, edgeHelpers.sendLoopInterval);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
